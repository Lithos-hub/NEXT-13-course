import { Layout } from "@/components/layouts";
import { Status } from "@/interfaces";
import { TasksApi } from "@/services";
import {
  Alert,
  Button,
  Divider,
  InputLabel,
  MenuItem,
  Select,
  SelectChangeEvent,
  Snackbar,
  TextField,
} from "@mui/material";
import { GetServerSideProps } from "next";
import Head from "next/head";
import Link from "next/link";

import React, { ChangeEvent, FC, useEffect, useState } from "react";
import { Task } from "@/interfaces";
import TaskModel from "../../models/Task";

interface Props {
  task: Task;
}

const TaskDetailPage: FC<Props> = ({ task }) => {
  const [description, setDescription] = useState(task.description);
  const [status, setStatus] = useState<Status>(task.status);
  const [snackbar, setSnackbar] = useState(false);

  const handleStatus = (event: SelectChangeEvent) => {
    setStatus(event.target.value as Status);
  };
  const handleDescription = (event: SelectChangeEvent) => {
    setDescription(event.target.value as string);
  };

  useEffect(() => {
    setDescription(task.description);
    setStatus(task.status);
  }, [task.description, task.status]);

  const onSave = async () => {
    if (!description || !status) return;
    await TasksApi.put(`/tasks/${task._id}`, {
      _id: task._id,
      description,
      status,
    });
    setSnackbar(true);
  };

  return (
    <>
      <Head>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout title={`${description.substring(0, 20)}... | Jira App`}>
        <>
          <Link href="/">
            <Button color="secondary" variant="outlined">
              Comeback
            </Button>
          </Link>

          <Divider className="my-5" />

          <div className="flex flex-col gap-5">
            <TextField
              autoFocus
              id="descripton"
              label="Task description"
              fullWidth
              multiline
              error={description.length <= 0}
              value={description}
              helperText={description.length <= 0 && "This field is mandatory"}
              minRows={4}
              variant="filled"
              onChange={(e: ChangeEvent<HTMLInputElement>) =>
                handleDescription(e)
              }
            />
            <InputLabel id="status-label">Status</InputLabel>
            <Select
              labelId="status-label"
              variant="filled"
              error={status.length <= 0}
              value={status}
              onChange={handleStatus}
            >
              <MenuItem value={"locked"}>Locked</MenuItem>
              <MenuItem value={"backlog"}>Backlog</MenuItem>
              <MenuItem value={"in-progress"}>In progress</MenuItem>
              <MenuItem value={"pr"}>PR under review</MenuItem>
              <MenuItem value={"rtodeploy"}>Ready to deploy</MenuItem>
              <MenuItem value={"rfortest"}>Ready for test</MenuItem>
            </Select>

            <Button color="success" variant="outlined" onClick={onSave}>
              Save
            </Button>
          </div>
          <Snackbar
            open={snackbar}
            autoHideDuration={3000}
            onClose={() => setSnackbar(false)}
          >
            <Alert severity="success">Tarea actualizada!</Alert>
          </Snackbar>
        </>
      </Layout>
    </>
  );
};

export default TaskDetailPage;

export const getServerSideProps: GetServerSideProps = async ({ params }) => {
  const { id } = params as { id: string };

  const task = await TaskModel.findById(id).lean();

  if (!task) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }

  return {
    props: {
      task: JSON.parse(JSON.stringify(task)), // => Because the mongo ObjectId problem
    },
  };
};
